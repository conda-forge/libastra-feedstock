diff --git a/.gitignore b/.gitignore
index ab7fff6b..cb32ffe1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -40,6 +40,7 @@ __pycache__
 /build/linux/src/*
 /build/linux/matlab/*
 /build/linux/python/*
+/build/cmake*
 
 # MSVC build output
 /build/msvc/bin/
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 00000000..d2403379
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,45 @@
+# 3.11.0 is from scikit-build documentation 3.18.0 is required for
+# CUDA_ARCHITECTURES property
+cmake_minimum_required(VERSION 3.18.0)
+
+# Get consistent behavior out of all the compilers
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_CXX_EXTENSIONS OFF)
+
+project(
+  astra-toolbox
+  VERSION 2.3.1
+  DESCRIPTION
+    "a MATLAB and Python toolbox of high-performance GPU primitives for 2D and 3D tomography."
+  LANGUAGES CXX)
+
+option(ASTRA_USE_CUDA "Whether libastra is built with CUDA." ON)
+
+if(ASTRA_USE_CUDA)
+  enable_language(CUDA)
+  find_package(CUDAToolkit REQUIRED COMPONENTS cudart cufft)
+endif()
+
+add_subdirectory(src)
+
+if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
+  include(CTest)
+endif()
+
+if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)
+  add_subdirectory(tests)
+endif()
+
+# Installs these targets to CMAKE_INSTALL_PREFIX
+install(
+  TARGETS astra
+  EXPORT AstraTargets
+  LIBRARY DESTINATION "lib")
+install(DIRECTORY "${CMAKE_SOURCE_DIR}/include" DESTINATION ".")
+install(
+  EXPORT AstraTargets
+  FILE "AstraTargets.cmake"
+  NAMESPACE "astra::"
+  DESTINATION "lib/cmake/astra")
+
diff --git a/python/builder.py b/python/builder.py
deleted file mode 100644
index db51f55c..00000000
--- a/python/builder.py
+++ /dev/null
@@ -1,170 +0,0 @@
-# -----------------------------------------------------------------------
-# Copyright: 2010-2022, imec Vision Lab, University of Antwerp
-#            2013-2022, CWI, Amsterdam
-#
-# Contact: astra@astra-toolbox.com
-# Website: http://www.astra-toolbox.com/
-#
-# This file is part of the ASTRA Toolbox.
-#
-#
-# The ASTRA Toolbox is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# The ASTRA Toolbox is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with the ASTRA Toolbox. If not, see <http://www.gnu.org/licenses/>.
-#
-# -----------------------------------------------------------------------
-
-import os
-import sys
-import numpy as np
-
-from distutils.core import setup
-
-from setuptools import Command
-
-from Cython.Distutils import build_ext
-from Cython.Build import cythonize
-
-import argparse
-import sys
-
-# We write a cython include file config.pxi containing the HAVE_CUDA setting
-# to the directory passed by --astra_build_config_dir on the command line,
-# or to the source dir otherwise.
-
-if sys.version_info.major > 2:
-    parser = argparse.ArgumentParser(allow_abbrev=False, add_help=False)
-else:
-    parser = argparse.ArgumentParser(add_help=False)
-parser.add_argument('--astra_build_config_dir')
-parser.add_argument('--astra_build_cython_dir')
-parser.add_argument('--astra_cuda_dependencies', action='store_true')
-args, script_args = parser.parse_known_args()
-
-if args.astra_build_cython_dir is None:
-    build_dir = '.'
-else:
-    build_dir = args.astra_build_cython_dir
-
-if args.astra_cuda_dependencies:
-    extra_install_requires = ['nvidia-cuda-runtime-cu12==12.1.105', 'nvidia-cufft-cu12==11.0.2.54']
-else:
-    extra_install_requires = [ ]
-
-use_cuda = ('-DASTRA_CUDA' in os.environ.get('CPPFLAGS', '') or
-            '/DASTRA_CUDA' in os.environ.get('CL', ''))
-
-cfg_string = 'DEF HAVE_CUDA=' + str(use_cuda) + '\n'
-update_cfg = True
-
-self_path = os.path.dirname(os.path.abspath(__file__))
-
-include_path = []
-if args.astra_build_config_dir is None:
-    cfg_file = os.path.join(self_path, 'astra', 'config.pxi')
-else:
-    include_path += [args.astra_build_config_dir]
-    cfg_file = os.path.join(args.astra_build_config_dir, 'config.pxi')
-
-try:
-    with open(cfg_file, 'r') as cfg:
-        cfg_fromfile = cfg.read()
-    if cfg_fromfile == cfg_string:
-        update_cfg = False
-except IOError:
-    pass
-
-if update_cfg:
-    with open(cfg_file, 'w') as cfg:
-        cfg.write(cfg_string)
-
-cmdclass = {}
-
-# Custom command to (forcefully) override bdist's dist_dir setting used
-# by install/easy_install internally.
-# We use this to allow setting dist_dir to an out-of-tree build directory.
-class SetDistDirCommand(Command):
-    user_options = [
-        ('dist-dir=', 'd', "directory to put final built distributions in")
-    ]
-    def initialize_options(self):
-        self.dist_dir = None
-
-    def finalize_options(self):
-        bdist = self.reinitialize_command('bdist')
-        bdist.dist_dir = self.dist_dir
-        bdist.ensure_finalized()
-
-    def run(self):
-        pass
-
-# Custom command to add files (typically .so/.dll) to the module's directory
-# when installing (or building a wheel)
-class AddExtraLibCommand(Command):
-    user_options = [
-        ('file=', 'f', "extra platlib file(s) to install"),
-    ]
-    def initialize_options(self):
-        self.file = None
-
-    def finalize_options(self):
-        build_ext = self.get_finalized_command('build_ext')
-        self.build_lib = os.path.join(build_ext.build_lib, 'astra')
-
-    def run(self):
-        import shutil
-        for F in self.file.split(';'):
-            print("Installing", F, "to", self.build_lib)
-            shutil.copy2(F, self.build_lib)
-
-    # TODO: Do we need get_outputs()?
-
-
-ext_modules = cythonize(os.path.join('.', 'astra', '*.pyx'),
-                        include_path=include_path,
-                        build_dir=build_dir,
-                        language_level=3)
-cmdclass = {'build_ext': build_ext, 'set_dist_dir': SetDistDirCommand, 'add_extra_lib': AddExtraLibCommand }
-
-for m in ext_modules:
-    if m.name in ('astra.plugin_c', 'astra.algorithm_c'):
-        m.sources.append(os.path.join('.', 'astra', 'src',
-                                      'PythonPluginAlgorithm.cpp'))
-    if m.name in ('astra.plugin_c'):
-        m.sources.append(os.path.join('.', 'astra', 'src',
-                                      'PythonPluginAlgorithmFactory.cpp'))
-    if m.name in ('astra.utils'):
-        m.sources.append(os.path.join('.', 'astra', 'src',
-                                      'dlpack.cpp'))
-
-with open('README.md', 'r', encoding='utf-8') as f:
-    long_description = f.read()
-
-
-setup(
-    script_args=script_args,
-    ext_modules=ext_modules,
-    include_dirs=[np.get_include()],
-    cmdclass=cmdclass,
-    packages=['astra', 'astra.plugins'],
-    install_requires=['numpy', 'scipy'] + extra_install_requires,
-    name='astra-toolbox',
-    version='2.3.1',
-    description='High-performance GPU primitives and algorithms for 2D and 3D tomography',
-    long_description=long_description,
-    long_description_content_type='text/markdown',
-    license='GPLv3',
-    project_urls={
-        'Home page': 'https://astra-toolbox.com',
-        'Source': 'https://github.com/astra-toolbox/astra-toolbox'
-    }
-)
diff --git a/python/pyproject.toml b/python/pyproject.toml
new file mode 100644
index 00000000..148adaff
--- /dev/null
+++ b/python/pyproject.toml
@@ -0,0 +1,2 @@
+[build-system]
+requires = ["setuptools ~= 58.0", "wheel", "cython >= 0.13", "numpy"]
diff --git a/python/setup.py b/python/setup.py
new file mode 100644
index 00000000..b440afb7
--- /dev/null
+++ b/python/setup.py
@@ -0,0 +1,122 @@
+# -----------------------------------------------------------------------
+# Copyright: 2010-2022, imec Vision Lab, University of Antwerp
+#            2013-2022, CWI, Amsterdam
+#
+# Contact: astra@astra-toolbox.com
+# Website: http://www.astra-toolbox.com/
+#
+# This file is part of the ASTRA Toolbox.
+#
+#
+# The ASTRA Toolbox is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# The ASTRA Toolbox is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with the ASTRA Toolbox. If not, see <http://www.gnu.org/licenses/>.
+#
+# -----------------------------------------------------------------------
+import os
+import platform
+
+from Cython.Build import cythonize
+import numpy as np
+from setuptools import setup
+
+ASTRA_USE_CUDA = os.environ.get('ASTRA_USE_CUDA') in ('ON', 'TRUE', 'YES')
+print("ASTRA_USE_CUDA is set to {}".format(ASTRA_USE_CUDA))
+
+# Create a cython cxi file with either HAVE_CUDA=True or False
+with open(
+        os.path.join(os.path.dirname(__file__), 'astra', 'config.pxi'),
+        'w',
+) as cfg:
+    cfg.write('DEF HAVE_CUDA={!s}\n'.format(ASTRA_USE_CUDA))
+
+ext_modules = cythonize(
+    module_list=os.path.join('.', 'astra', '*.pyx'),
+    language_level=2,  # sets python features to python 2
+)
+
+# Add additional parameters to each Extension
+for m in ext_modules:
+    m.include_dirs += [
+        np.get_include(),
+        os.path.join(
+            os.environ['CONDA_PREFIX'],
+            'Library' if platform.system() == 'Windows' else '',
+            'include',
+        )
+    ]
+    m.define_macros += [
+        ('ASTRA_PYTHON', None),
+        ('ASTRA_CUDA', None) if ASTRA_USE_CUDA else ('NO_ASTRA_CUDA', None),
+    ]
+    m.library_dirs += [
+        os.path.join(
+            os.environ['CONDA_PREFIX'],
+            'Library' if platform.system() == 'Windows' else '',
+            'lib',
+        )
+    ]
+    if m.name in ('astra.utils'):
+        m.sources.append(
+            os.path.join(
+                '.',
+                'astra',
+                'src',
+                'dlpack.cpp'
+            ))
+        m.include_dirs.append(
+            os.path.join(
+                '..',
+                'lib',
+                'include',
+            ))
+    if m.name in ('astra.plugin_c', 'astra.algorithm_c'):
+        m.sources.append(
+            os.path.join(
+                '.',
+                'astra',
+                'src',
+                'PythonPluginAlgorithm.cpp',
+            ))
+    if m.name in ('astra.plugin_c'):
+        m.sources.append(
+            os.path.join(
+                '.',
+                'astra',
+                'src',
+                'PythonPluginAlgorithmFactory.cpp',
+            ))
+
+with open('README.md', 'r') as f:
+    long_description = f.read()
+
+setup(
+    name='astra-toolbox',
+    version='2.3.1',
+    description='High-performance GPU primitives and algorithms for 2D and 3D tomography',
+    long_description=long_description,
+    long_description_content_type='text/markdown',
+    license='GPLv3',
+    project_urls={
+        'Home page': 'https://astra-toolbox.com',
+        'Source': 'https://github.com/astra-toolbox/astra-toolbox'
+    },
+    ext_modules=ext_modules,
+    packages=[
+        'astra',
+        'astra.plugins',
+    ],
+    install_requires=[
+        'numpy',
+        'scipy',
+    ],
+)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100644
index 00000000..72729e9b
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1,172 @@
+# Collect source and header files --------------------------------------------
+set(ASTRA_SOURCES
+    Algorithm.cpp
+    ArtAlgorithm.cpp
+    AstraObjectFactory.cpp
+    AstraObjectManager.cpp
+    BackProjectionAlgorithm.cpp
+    CglsAlgorithm.cpp
+    CompositeGeometryManager.cpp
+    ConeProjectionGeometry3D.cpp
+    ConeVecProjectionGeometry3D.cpp
+    Config.cpp
+    Data3D.cpp
+    DataProjector.cpp
+    DataProjectorPolicies.cpp
+    FanFlatBeamLineKernelProjector2D.cpp
+    FanFlatBeamStripKernelProjector2D.cpp
+    FanFlatProjectionGeometry2D.cpp
+    FanFlatVecProjectionGeometry2D.cpp
+    Features.cpp
+    FilteredBackProjectionAlgorithm.cpp
+    Filters.cpp
+    Float32Data.cpp
+    Float32Data2D.cpp
+    Float32ProjectionData2D.cpp
+    Float32VolumeData2D.cpp
+    ForwardProjectionAlgorithm.cpp
+    Fourier.cpp
+    GeometryUtil2D.cpp
+    GeometryUtil3D.cpp
+    Globals.cpp
+    Logging.cpp
+    ParallelBeamBlobKernelProjector2D.cpp
+    ParallelBeamDistanceDrivenProjector2D.cpp
+    ParallelBeamLinearKernelProjector2D.cpp
+    ParallelBeamLineKernelProjector2D.cpp
+    ParallelBeamStripKernelProjector2D.cpp
+    ParallelProjectionGeometry2D.cpp
+    ParallelProjectionGeometry3D.cpp
+    ParallelVecProjectionGeometry2D.cpp
+    ParallelVecProjectionGeometry3D.cpp
+    PlatformDepSystemCode.cpp
+    PluginAlgorithmFactory.cpp
+    ProjectionGeometry2D.cpp
+    ProjectionGeometry2DFactory.cpp
+    ProjectionGeometry3D.cpp
+    ProjectionGeometry3DFactory.cpp
+    Projector2D.cpp
+    Projector3D.cpp
+    ReconstructionAlgorithm2D.cpp
+    ReconstructionAlgorithm3D.cpp
+    SartAlgorithm.cpp
+    SheppLogan.cpp
+    SirtAlgorithm.cpp
+    SparseMatrix.cpp
+    SparseMatrixProjectionGeometry2D.cpp
+    SparseMatrixProjector2D.cpp
+    Utilities.cpp
+    VolumeGeometry2D.cpp
+    VolumeGeometry3D.cpp
+    XMLConfig.cpp
+    XMLDocument.cpp
+    XMLNode.cpp)
+
+file(GLOB_RECURSE ASTRA_HEADERS "${CMAKE_SOURCE_DIR}/include/*"
+     LIST_DIRECTORIES false)
+message(VERBOSE "Public headers: ${ASTRA_HEADERS}")
+
+set(ASTRA_INCLUDES "${CMAKE_SOURCE_DIR}/include"
+                   "${CMAKE_SOURCE_DIR}/lib/include")
+
+message(VERBOSE "Include directories for libastra: ${ASTRA_INCLUDES}")
+
+# Declare libastra and assign all the properties -----------------------------
+
+add_library(astra SHARED ${ASTRA_SOURCES})
+
+set_target_properties(
+  astra
+  PROPERTIES POSITION_INDEPENDENT_CODE ON
+             COMPILE_FEATURES cxx_std_17
+             INCLUDE_DIRECTORIES "${ASTRA_INCLUDES}"
+             VERSION 0.0.0
+             SOVERSION 0
+             OUTPUT_NAME "${OUTPUT_NAME}")
+
+if(MSVC OR WIN32)
+  # DLL_EXPORTS marks functions as for external use (shared library) on Windows
+  target_compile_definitions(
+    astra
+    PRIVATE
+    "DLL_EXPORTS"
+  )
+endif(MSVC OR WIN32)
+
+if(ASTRA_USE_CUDA)
+
+  set(ASTRA_CUDA_SOURCES
+      CudaProjector2D.cpp
+      CudaProjector3D.cpp
+      CudaReconstructionAlgorithm2D.cpp
+      CudaBackProjectionAlgorithm.cpp
+      CudaDartMaskAlgorithm.cpp
+      CudaDartMaskAlgorithm3D.cpp
+      CudaDataOperationAlgorithm.cpp
+      CudaRoiSelectAlgorithm.cpp
+      CudaDartSmoothingAlgorithm.cpp
+      CudaDartSmoothingAlgorithm3D.cpp
+      CudaFilteredBackProjectionAlgorithm.cpp
+      CudaForwardProjectionAlgorithm.cpp
+      CudaSartAlgorithm.cpp
+      CudaSirtAlgorithm.cpp
+      CudaCglsAlgorithm.cpp
+      CudaCglsAlgorithm3D.cpp
+      CudaEMAlgorithm.cpp
+      CudaFDKAlgorithm3D.cpp
+      CudaSirtAlgorithm3D.cpp
+      CudaBackProjectionAlgorithm3D.cpp
+      CudaForwardProjectionAlgorithm3D.cpp
+      "${CMAKE_SOURCE_DIR}/cuda/2d/algo.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/par_fp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/par_bp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/fan_fp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/fan_bp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/fbp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/sirt.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/sart.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/cgls.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/em.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/astra.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/util.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/arith.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/fft.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/darthelper.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/darthelper3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/algo3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/cgls3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/cone_fp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/cone_bp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/fdk.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/par3d_fp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/par3d_bp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/sirt3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/astra3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/util3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/arith3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/mem3d.cu")
+
+  set(ASTRA_CUDA_INCLUDES ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
+
+  target_sources(
+    astra
+    PRIVATE
+    ${ASTRA_CUDA_SOURCES})
+
+  target_include_directories(
+    astra
+    PUBLIC
+    ${ASTRA_CUDA_INCLUDES})
+
+  # ASTRA_CUDA enables CUDA portions of code
+  target_compile_definitions(
+    astra
+    PUBLIC
+    "ASTRA_CUDA")
+
+  target_link_libraries(
+    astra
+    PUBLIC
+    CUDA::cufft CUDA::cudart)
+
+endif()
diff --git a/src/Globals.cpp b/src/Globals.cpp
index 5b19eb5a..255747be 100644
--- a/src/Globals.cpp
+++ b/src/Globals.cpp
@@ -26,7 +26,10 @@ along with the ASTRA Toolbox. If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "astra/Globals.h"
+
+#ifdef ASTRA_CUDA
 #include "astra/cuda/2d/astra.h"
+#endif
 
 namespace astra {
 
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
new file mode 100644
index 00000000..a8e44a66
--- /dev/null
+++ b/tests/CMakeLists.txt
@@ -0,0 +1,28 @@
+# Find libboost components ---------------------------------------------------
+
+set(Boost_USE_STATIC_LIBS OFF)
+set(Boost_USE_MULTITHREADED ON)
+set(Boost_USE_STATIC_RUNTIME OFF)
+find_package(Boost 1.71 CONFIG REQUIRED COMPONENTS unit_test_framework)
+
+# Collect source and header files --------------------------------------------
+
+file(GLOB ASTRA_TEST_SOURCES "${CMAKE_SOURCE_DIR}/tests/*.cpp")
+
+set(ASTRA_INCLUDES
+    "${CMAKE_SOURCE_DIR}/include" ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}
+    "${CMAKE_SOURCE_DIR}/lib/include")
+
+# Declare tests and register with cmake
+
+add_executable(astratest ${ASTRA_TEST_SOURCES})
+
+set_target_properties(
+  astratest
+  PROPERTIES POSITION_INDEPENDENT_CODE ON
+             COMPILE_DEFINITIONS "ASTRA_CUDA"
+             COMPILE_FEATURES cxx_std_17
+             INCLUDE_DIRECTORIES "${ASTRA_INCLUDES}"
+             LINK_LIBRARIES "Boost::unit_test_framework;astra")
+
+add_test(COMMAND astratest)
diff --git a/tests/test_FanFlatProjectionGeometry2D.cpp b/tests/test_FanFlatProjectionGeometry2D.cpp
index 5c669223..f5d89d67 100644
--- a/tests/test_FanFlatProjectionGeometry2D.cpp
+++ b/tests/test_FanFlatProjectionGeometry2D.cpp
@@ -94,7 +94,7 @@ BOOST_AUTO_TEST_CASE( testFanFlatProjectionGeometry2D_Clone )
 	BOOST_REQUIRE( geom2 );
 	BOOST_REQUIRE( geom2->isInitialized() );
 
-	BOOST_CHECK( geom.isEqual(geom2) );
+	BOOST_CHECK( geom.isEqual(*geom2) );
 	BOOST_CHECK( geom2->getProjectionAngleCount() == 4 );
 	BOOST_CHECK( geom2->getDetectorCount() == 8 );
 	BOOST_CHECK( geom2->getDetectorWidth() == 0.5f );
diff --git a/tests/test_Float32ProjectionData2D.cpp b/tests/test_Float32ProjectionData2D.cpp
index d3f9a7b1..5e6de0af 100644
--- a/tests/test_Float32ProjectionData2D.cpp
+++ b/tests/test_Float32ProjectionData2D.cpp
@@ -44,11 +44,11 @@ BOOST_AUTO_TEST_CASE( testFloat32ProjectionData2D_Constructor1 )
 	astra::CParallelProjectionGeometry2D geom(2, 4, 0.5f, angles);
 	BOOST_REQUIRE( geom.isInitialized() );
 
-	astra::CFloat32ProjectionData2D data(&geom);
+	astra::CFloat32ProjectionData2D data(geom);
 	BOOST_REQUIRE( data.isInitialized() );
 
 	BOOST_CHECK( data.getType() == astra::CFloat32Data2D::PROJECTION );
-	BOOST_CHECK( data.getGeometry()->isEqual(&geom) );
+	BOOST_CHECK( data.getGeometry().isEqual(geom) );
 }
 
 BOOST_AUTO_TEST_CASE( testFloat32ProjectionData2D_Constructor2 )
@@ -58,11 +58,11 @@ BOOST_AUTO_TEST_CASE( testFloat32ProjectionData2D_Constructor2 )
 	astra::CParallelProjectionGeometry2D geom(2, 4, 0.5f, angles);
 	BOOST_REQUIRE( geom.isInitialized() );
 
-	astra::CFloat32ProjectionData2D data(&geom, d);
+	astra::CFloat32ProjectionData2D data(geom, d);
 	BOOST_REQUIRE( data.isInitialized() );
 
 	BOOST_CHECK( data.getType() == astra::CFloat32Data2D::PROJECTION );
-	BOOST_CHECK( data.getGeometry()->isEqual(&geom) );
+	BOOST_CHECK( data.getGeometry().isEqual(geom) );
 
 	// CHECKME: should this be necessary?
 	data.updateStatistics();
@@ -76,11 +76,11 @@ BOOST_AUTO_TEST_CASE( testFloat32ProjectionData2D_Constructor3 )
 	astra::CParallelProjectionGeometry2D geom(2, 4, 0.5f, angles);
 	BOOST_REQUIRE( geom.isInitialized() );
 
-	astra::CFloat32ProjectionData2D data(&geom, 3.5f);
+	astra::CFloat32ProjectionData2D data(geom, 3.5f);
 	BOOST_REQUIRE( data.isInitialized() );
 
 	BOOST_CHECK( data.getType() == astra::CFloat32Data2D::PROJECTION );
-	BOOST_CHECK( data.getGeometry()->isEqual(&geom) );
+	BOOST_CHECK( data.getGeometry().isEqual(geom) );
 
 	// CHECKME: should this be necessary?
 	data.updateStatistics();
@@ -94,13 +94,13 @@ BOOST_AUTO_TEST_CASE( testFloat32ProjectionData2D_Clone )
 	astra::CParallelProjectionGeometry2D geom(2, 4, 0.5f, angles);
 	BOOST_REQUIRE( geom.isInitialized() );
 
-	astra::CFloat32ProjectionData2D data(&geom, 3.5f);
+	astra::CFloat32ProjectionData2D data(geom, 3.5f);
 	BOOST_REQUIRE( data.isInitialized() );
 
 	astra::CFloat32ProjectionData2D data2(data);
 	BOOST_REQUIRE( data2.isInitialized() );
 
-	BOOST_CHECK( data2.getGeometry()->isEqual(&geom) );
+	BOOST_CHECK( data2.getGeometry().isEqual(geom) );
 	BOOST_CHECK( data2.getDataConst()[0] == 3.5f );
 	BOOST_CHECK( data2.getDataConst()[3] == 3.5f );
 
@@ -108,7 +108,7 @@ BOOST_AUTO_TEST_CASE( testFloat32ProjectionData2D_Clone )
 	data3 = data;
 	BOOST_REQUIRE( data3.isInitialized() );
 
-	BOOST_CHECK( data3.getGeometry()->isEqual(&geom) );
+	BOOST_CHECK( data3.getGeometry().isEqual(geom) );
 	BOOST_CHECK( data3.getDataConst()[0] == 3.5f );
 	BOOST_CHECK( data3.getDataConst()[3] == 3.5f );
 }
diff --git a/tests/test_Float32VolumeData2D.cpp b/tests/test_Float32VolumeData2D.cpp
index c8c80930..1018f061 100644
--- a/tests/test_Float32VolumeData2D.cpp
+++ b/tests/test_Float32VolumeData2D.cpp
@@ -42,11 +42,11 @@ BOOST_AUTO_TEST_CASE( testFloat32VolumeData2D_Constructor1 )
 	astra::CVolumeGeometry2D geom(16, 32);
 	BOOST_REQUIRE( geom.isInitialized() );
 
-	astra::CFloat32VolumeData2D data(&geom);
+	astra::CFloat32VolumeData2D data(geom);
 	BOOST_REQUIRE( data.isInitialized() );
 
 	BOOST_CHECK( data.getType() == astra::CFloat32Data2D::VOLUME );
-	BOOST_CHECK( data.getGeometry()->isEqual(&geom) );
+	BOOST_CHECK( data.getGeometry().isEqual(geom) );
 }
 
 BOOST_AUTO_TEST_CASE( testFloat32VolumeData2D_Constructor1odd )
@@ -54,11 +54,11 @@ BOOST_AUTO_TEST_CASE( testFloat32VolumeData2D_Constructor1odd )
 	astra::CVolumeGeometry2D geom(16, 32);
 	BOOST_REQUIRE( geom.isInitialized() );
 
-	astra::CFloat32VolumeData2D data(&geom, 1.0f);
+	astra::CFloat32VolumeData2D data(geom, 1.0f);
 	BOOST_REQUIRE( data.isInitialized() );
 
 	BOOST_CHECK( data.getType() == astra::CFloat32Data2D::VOLUME );
-	BOOST_CHECK( data.getGeometry()->isEqual(&geom) );
+	BOOST_CHECK( data.getGeometry().isEqual(geom) );
 
 	// CHECKME: should this be necessary?
 	data.updateStatistics();
@@ -71,12 +71,12 @@ BOOST_AUTO_TEST_CASE( testFloat32VolumeData2D_Constructor2 )
 	astra::CVolumeGeometry2D geom(2, 2);
 	BOOST_REQUIRE( geom.isInitialized() );
 
-	astra::CFloat32VolumeData2D data(&geom, d);
+	astra::CFloat32VolumeData2D data(geom, d);
 	BOOST_REQUIRE( data.isInitialized() );
 
 	BOOST_CHECK( data.getType() == astra::CFloat32Data2D::VOLUME );
 
-	BOOST_CHECK( data.getGeometry()->isEqual(&geom) );
+	BOOST_CHECK( data.getGeometry().isEqual(geom) );
 
 	// CHECKME: should this be necessary?
 	data.updateStatistics();
@@ -89,13 +89,13 @@ BOOST_AUTO_TEST_CASE( testFloat32VolumeData2D_Clone )
 	astra::CVolumeGeometry2D geom(2, 2);
 	BOOST_REQUIRE( geom.isInitialized() );
 
-	astra::CFloat32VolumeData2D data(&geom, d);
+	astra::CFloat32VolumeData2D data(geom, d);
 	BOOST_REQUIRE( data.isInitialized() );
 
 	astra::CFloat32VolumeData2D data2(data);
 	BOOST_REQUIRE( data2.isInitialized() );
 
-	BOOST_CHECK( data2.getGeometry()->isEqual(&geom) );
+	BOOST_CHECK( data2.getGeometry().isEqual(geom) );
 	BOOST_CHECK( data2.getDataConst()[0] == 1.0f );
 	BOOST_CHECK( data2.getDataConst()[3] == 4.0f );
 
@@ -103,7 +103,7 @@ BOOST_AUTO_TEST_CASE( testFloat32VolumeData2D_Clone )
 	data3 = data;
 	BOOST_REQUIRE( data3.isInitialized() );
 
-	BOOST_CHECK( data3.getGeometry()->isEqual(&geom) );
+	BOOST_CHECK( data3.getGeometry().isEqual(geom) );
 	BOOST_CHECK( data3.getDataConst()[0] == 1.0f );
 	BOOST_CHECK( data3.getDataConst()[3] == 4.0f );
 }
diff --git a/tests/test_ParallelProjectionGeometry2D.cpp b/tests/test_ParallelProjectionGeometry2D.cpp
index c5054ed7..460a000a 100644
--- a/tests/test_ParallelProjectionGeometry2D.cpp
+++ b/tests/test_ParallelProjectionGeometry2D.cpp
@@ -97,7 +97,7 @@ BOOST_AUTO_TEST_CASE( testParallelProjectionGeometry2D_Clone )
 
 	BOOST_REQUIRE( geom2->isInitialized() );
 
-	BOOST_CHECK( geom.isEqual(geom2) );
+	BOOST_CHECK( geom.isEqual(*geom2) );
 	BOOST_CHECK( geom2->getProjectionAngleCount() == 4 );
 	BOOST_CHECK( geom2->getDetectorCount() == 8 );
 	BOOST_CHECK( geom2->getDetectorWidth() == 0.5f );
diff --git a/tests/test_VolumeGeometry2D.cpp b/tests/test_VolumeGeometry2D.cpp
index 5ee96782..53a79e1b 100644
--- a/tests/test_VolumeGeometry2D.cpp
+++ b/tests/test_VolumeGeometry2D.cpp
@@ -105,7 +105,7 @@ BOOST_AUTO_TEST_CASE( testVolumeGeometry2D_Clone )
 
 	BOOST_REQUIRE( geom2->isInitialized() );
 
-	BOOST_CHECK( geom.isEqual(geom2) );
+	BOOST_CHECK( geom.isEqual(*geom2) );
 	BOOST_CHECK( geom2->getGridColCount() == 16 );
 	BOOST_CHECK( geom2->getGridRowCount() == 32 );
 	BOOST_CHECK( geom2->getGridTotCount() == 512 );
