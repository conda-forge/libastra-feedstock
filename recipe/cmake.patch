diff --git a/.gitignore b/.gitignore
index d3aa573..bbd99d2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -43,6 +43,7 @@ __pycache__
 /build/linux/src/*
 /build/linux/matlab/*
 /build/linux/python/*
+/build/cmake*
 
 # MSVC build output
 /bin/
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..d8aa7f1
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,45 @@
+# 3.11.0 is from scikit-build documentation 3.18.0 is required for
+# CUDA_ARCHITECTURES property
+cmake_minimum_required(VERSION 3.18.0)
+
+# Get consistent behavior out of all the compilers
+set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_CXX_EXTENSIONS OFF)
+
+project(
+  astra-toolbox
+  VERSION 2.2.0
+  DESCRIPTION
+    "a MATLAB and Python toolbox of high-performance GPU primitives for 2D and 3D tomography."
+  LANGUAGES CXX)
+
+option(ASTRA_USE_CUDA "Whether libastra is built with CUDA." ON)
+
+if(ASTRA_USE_CUDA)
+  enable_language(CUDA)
+  find_package(CUDAToolkit REQUIRED COMPONENTS cudart cufft)
+endif()
+
+add_subdirectory(src)
+
+if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
+  include(CTest)
+endif()
+
+if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)
+  add_subdirectory(tests)
+endif()
+
+# Installs these targets to CMAKE_INSTALL_PREFIX
+install(
+  TARGETS astra
+  EXPORT AstraTargets
+  LIBRARY DESTINATION "lib")
+install(DIRECTORY "${CMAKE_SOURCE_DIR}/include" DESTINATION ".")
+install(
+  EXPORT AstraTargets
+  FILE "AstraTargets.cmake"
+  NAMESPACE "astra::"
+  DESTINATION "lib/cmake/astra")
+
diff --git a/python/pyproject.toml b/python/pyproject.toml
new file mode 100644
index 0000000..148adaf
--- /dev/null
+++ b/python/pyproject.toml
@@ -0,0 +1,2 @@
+[build-system]
+requires = ["setuptools ~= 58.0", "wheel", "cython >= 0.13", "numpy"]
diff --git a/python/setup.py b/python/setup.py
new file mode 100644
index 0000000..bf50669
--- /dev/null
+++ b/python/setup.py
@@ -0,0 +1,104 @@
+# -----------------------------------------------------------------------
+# Copyright: 2010-2022, imec Vision Lab, University of Antwerp
+#            2013-2022, CWI, Amsterdam
+#
+# Contact: astra@astra-toolbox.com
+# Website: http://www.astra-toolbox.com/
+#
+# This file is part of the ASTRA Toolbox.
+#
+#
+# The ASTRA Toolbox is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# The ASTRA Toolbox is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with the ASTRA Toolbox. If not, see <http://www.gnu.org/licenses/>.
+#
+# -----------------------------------------------------------------------
+import os
+import platform
+
+from Cython.Build import cythonize
+import numpy as np
+from setuptools import setup
+
+ASTRA_USE_CUDA = os.environ.get('ASTRA_USE_CUDA') in ('ON', 'TRUE', 'YES')
+print("ASTRA_USE_CUDA is set to {}".format(ASTRA_USE_CUDA))
+
+# Create a cython cxi file with either HAVE_CUDA=True or False
+with open(
+        os.path.join(os.path.dirname(__file__), 'astra', 'config.pxi'),
+        'w',
+) as cfg:
+    cfg.write('DEF HAVE_CUDA={!s}\n'.format(ASTRA_USE_CUDA))
+
+ext_modules = cythonize(
+    module_list=os.path.join('.', 'astra', '*.pyx'),
+    language_level=2,  # sets python features to python 2
+)
+
+# Add additional parameters to each Extension
+for m in ext_modules:
+    m.include_dirs += [
+        np.get_include(),
+        os.path.join(
+            os.environ['CONDA_PREFIX'],
+            'Library' if platform.system() == 'Windows' else '',
+            'include',
+        )
+    ]
+    m.define_macros += [
+        ('ASTRA_PYTHON', None),
+        ('ASTRA_CUDA', None) if ASTRA_USE_CUDA else ('NO_ASTRA_CUDA', None),
+    ]
+    m.library_dirs += [
+        os.path.join(
+            os.environ['CONDA_PREFIX'],
+            'Library' if platform.system() == 'Windows' else '',
+            'lib',
+        )
+    ]
+    if m.name in ('astra.plugin_c', 'astra.algorithm_c'):
+        m.sources.append(
+            os.path.join(
+                '.',
+                'astra',
+                'src',
+                'PythonPluginAlgorithm.cpp',
+            ))
+    if m.name in ('astra.plugin_c'):
+        m.sources.append(
+            os.path.join(
+                '.',
+                'astra',
+                'src',
+                'PythonPluginAlgorithmFactory.cpp',
+            ))
+
+setup(
+    name='astra-toolbox',
+    version='2.2.0',
+    description='Python interface to the ASTRA Toolbox',
+    author='D.M. Pelt',
+    author_email='D.M.Pelt@cwi.nl',
+    url='https://github.com/astra-toolbox/astra-toolbox',
+    license='GPLv3',
+    ext_modules=ext_modules,
+    packages=[
+        'astra',
+        'astra.plugins',
+    ],
+    install_requires=[
+        'numpy',
+        'scipy',
+        'six',
+    ],
+    zip_safe=False,
+)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100644
index 0000000..2cddb53
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1,185 @@
+# Find libboost components ---------------------------------------------------
+
+set(Boost_USE_STATIC_LIBS OFF)
+set(Boost_USE_MULTITHREADED ON)
+set(Boost_USE_STATIC_RUNTIME OFF)
+find_package(Boost 1.70 CONFIG REQUIRED COMPONENTS thread )
+
+# Collect source and header files --------------------------------------------
+set(ASTRA_SOURCES
+    Algorithm.cpp
+    ArtAlgorithm.cpp
+    AstraObjectFactory.cpp
+    AstraObjectManager.cpp
+    BackProjectionAlgorithm.cpp
+    CglsAlgorithm.cpp
+    CompositeGeometryManager.cpp
+    ConeProjectionGeometry3D.cpp
+    ConeVecProjectionGeometry3D.cpp
+    Config.cpp
+    DataProjector.cpp
+    DataProjectorPolicies.cpp
+    FanFlatBeamLineKernelProjector2D.cpp
+    FanFlatBeamStripKernelProjector2D.cpp
+    FanFlatProjectionGeometry2D.cpp
+    FanFlatVecProjectionGeometry2D.cpp
+    Features.cpp
+    FilteredBackProjectionAlgorithm.cpp
+    Filters.cpp
+    Float32Data.cpp
+    Float32Data2D.cpp
+    Float32Data3D.cpp
+    Float32Data3DMemory.cpp
+    Float32ProjectionData2D.cpp
+    Float32ProjectionData3D.cpp
+    Float32ProjectionData3DMemory.cpp
+    Float32VolumeData2D.cpp
+    Float32VolumeData3D.cpp
+    Float32VolumeData3DMemory.cpp
+    ForwardProjectionAlgorithm.cpp
+    Fourier.cpp
+    GeometryUtil2D.cpp
+    GeometryUtil3D.cpp
+    Globals.cpp
+    Logging.cpp
+    ParallelBeamBlobKernelProjector2D.cpp
+    ParallelBeamDistanceDrivenProjector2D.cpp
+    ParallelBeamLinearKernelProjector2D.cpp
+    ParallelBeamLineKernelProjector2D.cpp
+    ParallelBeamStripKernelProjector2D.cpp
+    ParallelProjectionGeometry2D.cpp
+    ParallelProjectionGeometry3D.cpp
+    ParallelVecProjectionGeometry2D.cpp
+    ParallelVecProjectionGeometry3D.cpp
+    PlatformDepSystemCode.cpp
+    PluginAlgorithmFactory.cpp
+    ProjectionGeometry2D.cpp
+    ProjectionGeometry3D.cpp
+    Projector2D.cpp
+    Projector3D.cpp
+    ReconstructionAlgorithm2D.cpp
+    ReconstructionAlgorithm3D.cpp
+    SartAlgorithm.cpp
+    SheppLogan.cpp
+    SirtAlgorithm.cpp
+    SparseMatrix.cpp
+    SparseMatrixProjectionGeometry2D.cpp
+    SparseMatrixProjector2D.cpp
+    Utilities.cpp
+    VolumeGeometry2D.cpp
+    VolumeGeometry3D.cpp
+    XMLDocument.cpp
+    XMLNode.cpp)
+
+file(GLOB_RECURSE ASTRA_HEADERS "${CMAKE_SOURCE_DIR}/include/*"
+     LIST_DIRECTORIES false)
+message(VERBOSE "Public headers: ${ASTRA_HEADERS}")
+
+set(ASTRA_INCLUDES "${CMAKE_SOURCE_DIR}/include"
+                   "${CMAKE_SOURCE_DIR}/lib/include")
+
+message(VERBOSE "Include directories for libastra: ${ASTRA_INCLUDES}")
+
+# Declare libastra and assign all the properties -----------------------------
+
+add_library(astra SHARED ${ASTRA_SOURCES})
+
+set_target_properties(
+  astra
+  PROPERTIES POSITION_INDEPENDENT_CODE ON
+             COMPILE_FEATURES cxx_std_11
+             INCLUDE_DIRECTORIES "${ASTRA_INCLUDES}"
+             LINK_LIBRARIES Boost::thread
+             VERSION 0.0.0
+             SOVERSION 0
+             OUTPUT_NAME "${OUTPUT_NAME}")
+
+if(MSVC OR WIN32)
+  # DLL_EXPORTS marks functions as for external use (shared library) on Windows
+  target_compile_definitions(
+    astra
+    PRIVATE
+    "DLL_EXPORTS"
+  )
+endif(MSVC OR WIN32)
+
+if(ASTRA_USE_CUDA)
+
+  set(ASTRA_CUDA_SOURCES
+      CudaProjector2D.cpp
+      CudaProjector3D.cpp
+      CudaReconstructionAlgorithm2D.cpp
+      CudaBackProjectionAlgorithm.cpp
+      CudaDartMaskAlgorithm.cpp
+      CudaDartMaskAlgorithm3D.cpp
+      CudaDataOperationAlgorithm.cpp
+      CudaRoiSelectAlgorithm.cpp
+      CudaDartSmoothingAlgorithm.cpp
+      CudaDartSmoothingAlgorithm3D.cpp
+      CudaFilteredBackProjectionAlgorithm.cpp
+      CudaForwardProjectionAlgorithm.cpp
+      CudaSartAlgorithm.cpp
+      CudaSirtAlgorithm.cpp
+      CudaCglsAlgorithm.cpp
+      CudaCglsAlgorithm3D.cpp
+      CudaEMAlgorithm.cpp
+      CudaFDKAlgorithm3D.cpp
+      CudaSirtAlgorithm3D.cpp
+      CudaBackProjectionAlgorithm3D.cpp
+      CudaForwardProjectionAlgorithm3D.cpp
+      Float32Data3DGPU.cpp
+      Float32ProjectionData3DGPU.cpp
+      Float32VolumeData3DGPU.cpp
+      "${CMAKE_SOURCE_DIR}/cuda/2d/algo.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/par_fp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/par_bp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/fan_fp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/fan_bp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/fbp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/sirt.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/sart.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/cgls.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/em.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/astra.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/util.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/arith.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/fft.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/2d/darthelper.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/darthelper3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/algo3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/cgls3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/cone_fp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/cone_bp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/fdk.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/par3d_fp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/par3d_bp.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/sirt3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/astra3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/util3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/arith3d.cu"
+      "${CMAKE_SOURCE_DIR}/cuda/3d/mem3d.cu")
+
+  set(ASTRA_CUDA_INCLUDES ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
+
+  target_sources(
+    astra
+    PRIVATE
+    ${ASTRA_CUDA_SOURCES})
+
+  target_include_directories(
+    astra
+    PUBLIC
+    ${ASTRA_CUDA_INCLUDES})
+
+  # ASTRA_CUDA enables CUDA portions of code
+  target_compile_definitions(
+    astra
+    PUBLIC
+    "ASTRA_CUDA")
+
+  target_link_libraries(
+    astra
+    PUBLIC
+    CUDA::cufft CUDA::cudart)
+
+endif()
diff --git a/src/Globals.cpp b/src/Globals.cpp
index 5b19eb5..255747b 100644
--- a/src/Globals.cpp
+++ b/src/Globals.cpp
@@ -26,7 +26,10 @@ along with the ASTRA Toolbox. If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "astra/Globals.h"
+
+#ifdef ASTRA_CUDA
 #include "astra/cuda/2d/astra.h"
+#endif
 
 namespace astra {
 
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
new file mode 100644
index 0000000..939a353
--- /dev/null
+++ b/tests/CMakeLists.txt
@@ -0,0 +1,28 @@
+# Find libboost components ---------------------------------------------------
+
+set(Boost_USE_STATIC_LIBS OFF)
+set(Boost_USE_MULTITHREADED ON)
+set(Boost_USE_STATIC_RUNTIME OFF)
+find_package(Boost 1.71 CONFIG REQUIRED COMPONENTS unit_test_framework)
+
+# Collect source and header files --------------------------------------------
+
+file(GLOB ASTRA_TEST_SOURCES "${CMAKE_SOURCE_DIR}/tests/*.cpp")
+
+set(ASTRA_INCLUDES
+    "${CMAKE_SOURCE_DIR}/include" ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}
+    "${CMAKE_SOURCE_DIR}/lib/include")
+
+# Declare tests and register with cmake
+
+add_executable(astratest ${ASTRA_TEST_SOURCES})
+
+set_target_properties(
+  astratest
+  PROPERTIES POSITION_INDEPENDENT_CODE ON
+             COMPILE_DEFINITIONS "ASTRA_CUDA"
+             COMPILE_FEATURES cxx_std_11
+             INCLUDE_DIRECTORIES "${ASTRA_INCLUDES}"
+             LINK_LIBRARIES "Boost::unit_test_framework;astra")
+
+add_test(COMMAND astratest)
diff --git a/tests/python/test_line2d.py b/tests/python/test_line2d.py
index e5d8f2b..5d1cf82 100644
--- a/tests/python/test_line2d.py
+++ b/tests/python/test_line2d.py
@@ -2,7 +2,6 @@ import numpy as np
 import unittest
 import astra
 import math
-import pylab
 
 # Display sinograms with mismatch on test failure
 DISPLAY=False
@@ -356,6 +355,7 @@ def proj_type_to_fan(t):
     return t + '_fanflat'
 
 def display_mismatch(data, sinogram, a):
+  import pylab
   pylab.gray()
   pylab.imshow(data)
   pylab.figure()
@@ -367,6 +367,7 @@ def display_mismatch(data, sinogram, a):
   pylab.show()
 
 def display_mismatch_triple(data, sinogram, a, b, c):
+  import pylab
   pylab.gray()
   pylab.imshow(data)
   pylab.figure()
